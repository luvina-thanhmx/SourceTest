I. Environment
  - https://www.compilejava.net/
  - https://github.com/paulm29/ocajp
  
II. Note
  - http://education.oracle.com/education/downloads/Exam803_SampleQuestion.pdf


III. JAVA

1. Abstract
	Abstract Class
		A class which contains the abstract keyword in its declaration is known as abstract class.
		Abstract classes may or may not contain abstract methods, i.e., methods without body ( public void get(); )
		But, if a class has at least one abstract method, then the class must be declared abstract.
		If a class is declared abstract, it cannot be instantiated.
		To use an abstract class, you have to inherit it from another class, provide implementations to the abstract methods in it.
		If you inherit an abstract class, you have to provide implementations to all the abstract methods in it.

	Abstract Methods
		If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes, you can declare the method in the parent class as an abstract.
			abstract keyword is used to declare the method as abstract.
			You have to place the abstract keyword before the method name in the method declaration.
			An abstract method contains a method signature, but no method body.
			Instead of curly braces, an abstract method will have a semoi colon (;) at the end.

2. khai báo method, class, interface
	*the field*
		only public, protected, private, static, final, transient & volatile are permitted

	*the method*
		+ only public, protected, private, static, final, abstract, synchronized & native are permitted
		+ native, abstract => no body

	*the interface*
		only public & abstract are permitted

	*the interface method*
		only public & abstract are permitted

	*the interface field*
		only public, static & final are permitted

	*the class A*
		only public, abstract & final are permitted

3. so sánh
	primitive => toán từ "=="

	wrapper => 
		toán từ "=="
			so sánh vs constant => chỉ float, double sẽ trả là false (Ex: Float f11 = 42f;Float f22 = 42f;)
			so sánh vs new => all false (Ex: Double d11 = new Double(42.1); Double d22 = new Double(42.1);)

		equals()
			so sánh vs constant => all true (Ex: Float f11 = 42f;Float f22 = 42f;)
			so sánh vs new => all true (Ex: Double d11 = new Double(42.1); Double d22 = new Double(42.1);)
      
IV. Question

A. Chap 1,2
  1. 
    int x = 1;
    long y = 2;
    => x * y is long

  2. 
    int x = 3; 
    int y = ++x * 5 / x-- + --x;
    System.out.print(x + " ---- " + y);
    // x value is 2 and y is 7

  3. 
    short x = 10; 
    short y = 3; 
    short z = x * y; // Does not compile
    //short z = (short)(x * y); // Compiles ok
    
  4. 
    short x = 10;
    short y = 3;
    System.out.println(x / y);

  5.
    static public void main(String[] __A_V_) {
      String $ = "1";
      for (int x = 0; ++x < __A_V_.length;)
        $ +=__A_V_[x];
      System.out.println($);
    }

    ??? Compilation error or Runtime error and which line is error.

  6. 
    int []a = {1, 2, 3, 4, 5, 6};
    int i = a.length - 1;

    while(i>=0){
        System.out.print(a[i]);
      i--;
    } 

    A. 123456
    B. An exception could be thrown at runtime.
    C. 654321
    D. nothing
    E. 65432
    F. 12345
    
  7.
    - A and E are classes
    - B and D are interfaces 
    - C is an abstract class

    Which are true? (Choose 3)

     A. class F implements B, C{ }
     B. class F implements B{ } v
     C. class Fextends A, E{ }
     D. class F extends E{ } v
     E. class F implements B, D{ } v

  8. 
    public static void main(String[] args) {
      int a[] = { 1,2,3,4};
      System.out.print(a instanceof Object);
    }
    
    A. Will produce output as false.
    B. Compilation fails due to error at line 3.
    C. Will produce output as true.
    D. Compilation fails due to error at line 4.
    E. Length of this array is 3.
    
  9.
    int a[] = {1, 2, 053, 4};
    int b[][] = { 
        {1, 2, 4}, 
        {2, 2, 1}, 
        {0, 43, 2}
      };
    System.out.print(a[3] == b[0][2]);
    System.out.print(" " + (a[2] == b[2][1]));
    
    A. true false
    B. false false
    C. false true
    D. true true 
    E. Compilation fails
    
  10.
    int a[][] = new int[3][];
    a[1] = new int[]{1, 2, 3};
    a[2] = new int[]{4, 5};
    System.out.print(a[1][1]);
    
     A. Compilation fails due to line 3.
     B. Compilation fails due to line 4.
     C. An exception will be thrown in runtime.
     D. 2
     E. 3
     F. 5
   
   11.
      class Person{
        static int pid;
        int age;
        String name;

        Person(String s,int i ){
          ++pid;
          name=s;
          age=i;
        }
      }

      class Test{
        public static void main(String args[]){
          erson p1 = new Person("John" , 22);
          Test te = new Test();
          Person p2 = te.change(p1);
          System.out.println(p2.pid +" "+p2.name+ " "+p2.age);
          System.out.print(p1.pid +" "+p1.name+" "+ p1.age);
        }
        private Person change(Object o){
          Person p2 = (Person)o;
          p2.age = 25;
          return p2;
        }
      }

      A. 1 John 25
         1 John 25
      B. 1 John 25
         1 John 22
      C. 1 John 22
         1 John 22
      D. ClassCastException is thrown at runtime.
      E. Compilation fails.
    
    12.
      String s = "Java";
      s.concat(" SE 6");
      s.toLowerCase();
      System.out.print(s);
      
      Q: How many String objects have been created when the code reaches line 7?
      A: 
        line 1 - creates a new String object and give value 'java'
        line 2 - 2 string object - 'SE 6' and 'JAVA SE 6'
        line 3 - new String object 'java'
