*** java version để chạy đc wiperdog tối thiểu là 1.6_0_30
    bản thấp hơn ko hỗ trợ mã hóa và giải mã, phần data converter

*** sau khi install xong giá trị WIPERDOG_HOME sẽ được ghi vào 2 path:
  + /etc/rc.d/init.d/wiperdog
  + /root/folder_wiperdog/bin/wiperdog

*** ERROR: Exception in thread "main" java.lang.NoClassDefFoundError - Linux (Thường là do phiên bản groovy-all download sai)
- Config tại: \wiperdogInstaller\pom.xml
- Config tại: \wiperdogInstaller\src\main\resources\extractor.xml

*** Sử dụng WMIC

+ Example get data:
  - wmic os get FreePhysicalMemory,FreeSpaceInPagingFiles,FreeVirtualMemory /format:csv
  - wmic os get FreePhysicalMemory,FreeSpaceInPagingFiles,FreeVirtualMemory /format:table
  - wmic os get FreePhysicalMemory,FreeSpaceInPagingFiles,FreeVirtualMemory /value

***Xử lý chuỗi
+ Cắt từng phần tử: data.trim().split("")
+ check data string dạng numeric: data.matches(".*\\d.*")
+ check character dạng numeric: Character.isDigit(data.charAt(i)) //data là 1 string

***Đóng gói maven
Command: mvn package

***Tác dụng của waitFor:
- Chờ cho lệnh thực thi bởi process xong xuôi thì thằng process mới exit.
- Một số trường hợp để waitFor thì bị treo nếu process thực thi mãi ko dừng.
- Một số trường hợp ko có waitFor thì sẽ ko lấy được data trả về do thằng process chưa thực thi xong đã bị exit.

***get os name or dir:
System.getProperty("os.name")
System.getProperty("user.dir")

*** create array list
String[] array = new String[]{"a","b"};
tmpData = Arrays.asList(array); 

*** Get/Kill process
Window: 
	netstat -abno | findstr 13111
	taskkill /f /pid 13111
Linux: lsof -t -i:13111

=================== MongoDB =======================
+ add user:
	db.addUser("user","pass")
	db.auth("user","pass")
+ Run mongo:
	mongod.exe --auth
+ Run mongo other port
	mongod.exe --dbpath D:\test --port 123
+ Check(#325):
	mongoDB có dùng username/pass
		- Connect thành công dùng username/pass đúng
		- Connect không thành công dùng username/pass sai
		- Connect không thành công do không dùng username/pass
	mongoDB không dùng username/pass
		- Connect thành công không dùng username/pass
		- Connect thành công dùng username/pass

*** Mongodb on ubuntu
data ===> /var/lib/mongodb
startup => /usr/bin/mongod

=================== Github =======================
*** Github revert committed
	1. clone source
	2. cd vào trong source
	3. git reset --soft <hash>
	4. git push -f

//========================GROOVY=========================
*** check string use matches and regex
	String str = "123 thanh luvina insight 123g";
	def regex = "(.*)thanh(.*)insight(.*)"
	if (str.matches(regex)) {
	  println "TRUE"
	} else {
	  println "FALSE"
	}

***remove all non-numeric in string
	str.replaceAll( "[^\\d]", "" )

***reverse
	str.split(' ').toList().reverse().join(' ')

***Load class sử dụng groovy
	import org.codehaus.groovy.tools.RootLoader;

	ClassLoader parent = getClass().getClassLoader();
	GroovyClassLoader loader = new GroovyClassLoader(parent);
	Class jobExecutableCls = loader.parseClass(new File("src/resource/Common.groovy"));

***add data
	tmpList = []
	tmpList.add("value")
# in JS: tmpList.push("value")

***convert string to map
	def data = 'session=234567893egshdjchasd&userId=12345673456&timeOut=1800000'
	def result = data.split('&').inject([:]) { map, token -> 
	    token.split('=').with { map[it[0]] = it[1] }
	    map 
	}
***convert string
def str = "thanh mx"
println str.capitalize()
println str.toLowerCase()
assert "bo peep".toUpperCase() == 'BO PEEP'


*** json data
File f = new File("input.txt")
println f.getText()
def map = '{"person":{"name":"Guillaume","age":33,"pets":["dog","cat"]}}'
f.setText(map)
def slurper = new groovy.json.JsonSlurper()
def result = slurper.parseText(f.getText())

**** check connect to host on port
public boolean serverListening(String host, int port) {
	Socket s = null;
	try {
		s = new Socket(host, port);
		return true;
	}
	catch(Exception e) {
		return false;
	}
	finally {
		if(s != null)
			try {
				s.close();
			}
			catch(Exception e){
			}
	}
}

println serverListening("10.0.0.240", 13111)

http://pleac.sourceforge.net/pleac_groovy/strings.html
//======================JS=============================
cách replace => str.replace(".","_")
cách replace all => str.split(".").join("_")

+ catch exception:
try{
} catch(e) {
console.log(e.stack)
}

=====================================================
***Dependency
A => B <=> A use B

- WiperDogLib.RealtimeData => WiperDogLib.MongoDBConnection, WiperDogLib.DataToDrawChart
- WiperDogLib.RealtimeDataLiveTable => WiperDogLib.MongoDBConnection, WiperDogLib.DataToDrawChart
- WiperDogLib.ConsoleService => WiperDog.GetServletClass => WiperDog.GetConstantConfig
- WiperDogLib.LivetableDataAdapter => WiperDogLib.MongoDBConnection
- WiperDogLib.MenuGenerator(xwiki, js) => WiperDogLib.MongoDBConnection, WiperDogLib.MenuGeneratorLib
- WiperDogLib.MenuGeneratorLib => WiperDogLib.MongoDBConnection
- WiperDogLib.MsgPolicyFromMongo => WiperDogLib.MongoDBConnection
- WiperDogLib.chooseJobProcess => WiperDogLib.MongoDBConnection
- WiperDogLib.ExportPDFLib => WiperDogLib.jsPDF

- WiperDog.GetServlet => WiperDog.GetServletClass
- WiperDog.ConsoleManagement(xwiki, js) => WiperDogLib.JQueryUILib, WiperDogLib.ConsoleService
- WiperDog.DisplayPolicy(xwiki, js) => WiperDogLib.JQueryUILib, WiperDogLib.JqGridLib, WiperDogLib.ExportPDFLib, WiperDogLib.jsPDF, WiperDogLib.MsgPolicyFromMongo
- WiperDog.ImportInstance(xwiki, js) => WiperDog.GetServlet
- WiperDog.JobConfiguration(xwiki, js) => WiperDog.GetServlet, WiperDog.TestJob, WiperDog.JobDeclared, WiperDog.ImportInstanceServlet
- WiperDog.JobDBConnectionConfiguration(xwiki, js) => WiperDog.GetServlet
- WiperDog.JobDoc(xwiki, js) => WiperDog.GetServlet
- WiperDog.LastAccumulation(xwiki, js) => WiperDogLib.MongoDBConnection, WiperDogLib.JQueryUILib, WiperDogLib.JqGridLib, WiperDogLib.Highcharts
- WiperDog.LogFileInfo(xwiki, js) => WiperDog.GetServlet
- WiperDog.WiperdogServiceInstallation(xwiki, js) => WiperDog.ProcInstallWDService
- WiperDog.MonitoringData(xwiki, js) => WiperDogLib.MongoDBConnection, WiperDogLib.DataToDrawChart, WiperDogLib.JQueryUILib, WiperDogLib.JqGridLib, WiperDogLib.ExportPDFLib, WiperDogLib.jsPDF, WiperDogLib.MenuGenerator, WiperDogLib.LivetableDataAdapter, WiperDogLib.RealtimeData, WiperDogLib.RealtimeDataLiveTable
- WiperDog.TestJob(xwiki, js) => WiperDog.GetServlet
- WiperDog.WiperdogConfiguration(xwiki, js) => WiperDog.GetConstantConfig, WiperDog.ControlProcess
- WiperDog.processPolicy(xwiki, js) => WiperDogLib.PolicyStringLib, WiperDog.GetServlet, WiperDogLib.chooseJobProcess